    .macro mov32, reg, val
        movw \reg, #:lower16:\val
        movt \reg, #:upper16:\val
    .endm
# 1 FUNCTION_BEGIN  	1			get_one
# 2 MOV             %2	$arg0			
# 3 RET             	1			
# 4 RET             0				
#FUNCTION_BEGIN  	1			get_one
.text
.global get_one
.type get_one, %function
get_one:
    SUB sp, sp, #4
    STR r11, [sp, #0]
#MOV             %2	$arg0			
#RET             	1			
    MOV r0, #1
    LDR r11, [sp,#0]
    ADD sp, sp, #4
    MOV PC, LR
#RET             0				
    LDR r11, [sp,#0]
    ADD sp, sp, #4
    MOV PC, LR
# 1 FUNCTION_BEGIN  	2			deepWhileBr
# 2 MOV             %3	$arg0			
# 3 MOV             %4	$arg1			
# 4 ADD             %6	%3	%4		
# 5 PHI_MOV         %8	%6			
# 6 MOV             %10	42			
# 7 IMUL            %15	%10	2		
# 8 IMUL            %18	%15	2		
# 9 LABEL           				LOOP_7_BEGIN
# 10 CMP             	%8	75		
# 11 JGE             				LOOP_7_END
# 12 LABEL           				LOOP_7_DO
# 13 NOOP            				
# 14 CMP             	%8	100		
# 15 JGE             				IF_11_ELSE
# 16 ADD             %12	%8	%10		
# 17 CMP             	%12	99		
# 18 JLE             				IF_13_ELSE
# 19 NOOP            				
# 20 SET_ARG         0	0			
# 21 CALL            %17				get_one
# 22 CMP             	%17	1		
# 23 JNE             				IF_16_ELSE
# 24 NOOP            				
# 25 PHI_MOV         %19	%18			
# 26 JMP             				IF_16_END
# 27 LABEL           				IF_16_ELSE
# 28 PHI_MOV         %19	%12			
# 29 LABEL           				IF_16_END
# 30 PHI_MOV         %20	%19			
# 31 JMP             				IF_13_END
# 32 LABEL           				IF_13_ELSE
# 33 PHI_MOV         %20	%12			
# 34 LABEL           				IF_13_END
# 35 PHI_MOV         %21	%20			
# 36 JMP             				IF_11_END
# 37 LABEL           				IF_11_ELSE
# 38 PHI_MOV         %21	%8			
# 39 LABEL           				IF_11_END
# 40 NOOP            				
# 41 LABEL           				LOOP_7_CONTINUE
# 42 PHI_MOV         %8	%21			
# 43 JMP             				LOOP_7_BEGIN
# 44 NOOP            	%8			
# 45 NOOP            	%8			
# 46 NOOP            	%8			
# 47 NOOP            	%10			
# 48 NOOP            	%18			
# 49 NOOP            	%8			
# 50 LABEL           				LOOP_7_END
# 51 RET             	%8			
# 52 RET             0				
# [log]4 expire %3 r0
# [log]4 expire %4 r1
# [log]5 expire %6 r0
# [log]16 expire %15 r0
# [log]21 expire $arg:0:0 r0
# [log]21 expire $arg:0:21 r0
# [log]21 expire $arg:1:21 r1
# [log]21 expire $arg:2:21 r2
# [log]25 expire $arg:3:21 r3
# [log]25 expire %17 r8
# [log]30 expire %19 r0
# [log]35 expire %20 r0
# [log]35 expire %12 r7
#FUNCTION_BEGIN  	2			deepWhileBr
.text
.global deepWhileBr
.type deepWhileBr, %function
deepWhileBr:
    SUB sp, sp, #28
    STR lr, [sp, #24]
    STR r11, [sp, #0]
    STR r4, [sp, #4]
    STR r5, [sp, #8]
    STR r6, [sp, #12]
    STR r7, [sp, #16]
    STR r8, [sp, #20]
#MOV             %3	$arg0			
#MOV             %4	$arg1			
#ADD             %6	%3	%4		
    ADD r0, r0, r1
#PHI_MOV         %8	%6			
   MOV r4, r0
#MOV             %10	42			
    MOV r5, #42
#IMUL            %15	%10	2		
    MOV r12, #2
    MUL r0, r5, r12
#IMUL            %18	%15	2		
    MOV r12, #2
    MUL r6, r0, r12
#LABEL           				LOOP_7_BEGIN
LOOP_7_BEGIN:
#CMP             	%8	75		
    MOV r11, #75
    CMP r4, r11
#JGE             				LOOP_7_END
   BGE LOOP_7_END
#LABEL           				LOOP_7_DO
LOOP_7_DO:
#NOOP            				
#CMP             	%8	100		
    MOV r11, #100
    CMP r4, r11
#JGE             				IF_11_ELSE
   BGE IF_11_ELSE
#ADD             %12	%8	%10		
    ADD r7, r4, r5
#CMP             	%12	99		
    MOV r11, #99
    CMP r7, r11
#JLE             				IF_13_ELSE
   BLE IF_13_ELSE
#NOOP            				
#SET_ARG         0	0			
    MOV r0, #0
#CALL            %17				get_one
   BL get_one
    MOV r8, r0
#CMP             	%17	1		
    MOV r11, #1
    CMP r8, r11
#JNE             				IF_16_ELSE
   BNE IF_16_ELSE
#NOOP            				
#PHI_MOV         %19	%18			
   MOV r0, r6
#JMP             				IF_16_END
   B IF_16_END
#LABEL           				IF_16_ELSE
IF_16_ELSE:
#PHI_MOV         %19	%12			
   MOV r0, r7
#LABEL           				IF_16_END
IF_16_END:
#PHI_MOV         %20	%19			
#JMP             				IF_13_END
   B IF_13_END
#LABEL           				IF_13_ELSE
IF_13_ELSE:
#PHI_MOV         %20	%12			
   MOV r0, r7
#LABEL           				IF_13_END
IF_13_END:
#PHI_MOV         %21	%20			
#JMP             				IF_11_END
   B IF_11_END
#LABEL           				IF_11_ELSE
IF_11_ELSE:
#PHI_MOV         %21	%8			
   MOV r0, r4
#LABEL           				IF_11_END
IF_11_END:
#NOOP            				
#LABEL           				LOOP_7_CONTINUE
LOOP_7_CONTINUE:
#PHI_MOV         %8	%21			
   MOV r4, r0
#JMP             				LOOP_7_BEGIN
   B LOOP_7_BEGIN
#NOOP            	%8			
#NOOP            	%8			
#NOOP            	%8			
#NOOP            	%10			
#NOOP            	%18			
#NOOP            	%8			
#LABEL           				LOOP_7_END
LOOP_7_END:
#RET             	%8			
    MOV r0, r4
    LDR lr, [sp, #24]
    LDR r11, [sp,#0]
    LDR r4, [sp,#4]
    LDR r5, [sp,#8]
    LDR r6, [sp,#12]
    LDR r7, [sp,#16]
    LDR r8, [sp,#20]
    ADD sp, sp, #28
    MOV PC, LR
#RET             0				
    LDR lr, [sp, #24]
    LDR r11, [sp,#0]
    LDR r4, [sp,#4]
    LDR r5, [sp,#8]
    LDR r6, [sp,#12]
    LDR r7, [sp,#16]
    LDR r8, [sp,#20]
    ADD sp, sp, #28
    MOV PC, LR
# 1 FUNCTION_BEGIN  	0			main
# 2 MOV             %23	2			
# 3 SET_ARG         1	%23			
# 4 SET_ARG         0	%23			
# 5 CALL            %24				deepWhileBr
# 6 SET_ARG         0	%24			
# 7 CALL            %25				putint
# 8 RET             	0			
# 9 RET             0				
# [log]4 expire $arg:1:0 r1
# [log]4 expire %23 r4
# [log]5 expire $arg:0:0 r0
# [log]5 expire $arg:0:5 r0
# [log]5 expire $arg:1:5 r1
# [log]5 expire $arg:2:5 r2
# [log]6 expire $arg:3:5 r3
# [log]6 expire %24 r4
# [log]7 expire %25 r4
# [log]7 expire $arg:0:7 r0
# [log]7 expire $arg:1:7 r1
# [log]7 expire $arg:2:7 r2
#FUNCTION_BEGIN  	0			main
.text
.global main
.type main, %function
main:
    SUB sp, sp, #12
    STR lr, [sp, #8]
    STR r11, [sp, #0]
    STR r4, [sp, #4]
#MOV             %23	2			
    MOV r4, #2
#SET_ARG         1	%23			
    MOV r1, r4
#SET_ARG         0	%23			
    MOV r0, r4
#CALL            %24				deepWhileBr
   BL deepWhileBr
    MOV r4, r0
#SET_ARG         0	%24			
    MOV r0, r4
#CALL            %25				putint
   BL putint
    MOV r4, r0
#RET             	0			
    MOV r0, #0
    LDR lr, [sp, #8]
    LDR r11, [sp,#0]
    LDR r4, [sp,#4]
    ADD sp, sp, #12
    MOV PC, LR
#RET             0				
    LDR lr, [sp, #8]
    LDR r11, [sp,#0]
    LDR r4, [sp,#4]
    ADD sp, sp, #12
    MOV PC, LR
