    .macro mov32, reg, val
        movw \reg, #:lower16:\val
        movt \reg, #:upper16:\val
    .endm
# 1 FUNCTION_BEGIN  	3			set
# 2 MOV             %2	$arg0			
# 3 INFO            				NOT CONSTEXPR
# 4 MOV             %3	$arg1			
# 5 MOV             %4	$arg2			
# 6 MOV             %6	30			
# 7 MALLOC_IN_STACK %&7	124			
# 8 SET_ARG         0	%&7			
# 9 SET_ARG         1	0			
# 10 SET_ARG         2	124			
# 11 CALL            				memset
# 12 SAL             %8	0	2		
# 13 STORE           	%&7	%8	1	
# 14 SAL             %12	0	2		
# 15 LOAD            %11	%&7	%12		
# 16 IMUL            %10	%11	2		
# 17 SAL             %14	1	2		
# 18 STORE           	%&7	%14	%10	
# 19 SAL             %18	1	2		
# 20 LOAD            %17	%&7	%18		
# 21 IMUL            %16	%17	2		
# 22 SAL             %20	2	2		
# 23 STORE           	%&7	%20	%16	
# 24 SAL             %24	2	2		
# 25 LOAD            %23	%&7	%24		
# 26 IMUL            %22	%23	2		
# 27 SAL             %26	3	2		
# 28 STORE           	%&7	%26	%22	
# 29 SAL             %30	3	2		
# 30 LOAD            %29	%&7	%30		
# 31 IMUL            %28	%29	2		
# 32 SAL             %32	4	2		
# 33 STORE           	%&7	%32	%28	
# 34 SAL             %36	4	2		
# 35 LOAD            %35	%&7	%36		
# 36 IMUL            %34	%35	2		
# 37 SAL             %38	5	2		
# 38 STORE           	%&7	%38	%34	
# 39 SAL             %42	5	2		
# 40 LOAD            %41	%&7	%42		
# 41 IMUL            %40	%41	2		
# 42 SAL             %44	6	2		
# 43 STORE           	%&7	%44	%40	
# 44 SAL             %48	6	2		
# 45 LOAD            %47	%&7	%48		
# 46 IMUL            %46	%47	2		
# 47 SAL             %50	7	2		
# 48 STORE           	%&7	%50	%46	
# 49 SAL             %54	7	2		
# 50 LOAD            %53	%&7	%54		
# 51 IMUL            %52	%53	2		
# 52 SAL             %56	8	2		
# 53 STORE           	%&7	%56	%52	
# 54 SAL             %60	8	2		
# 55 LOAD            %59	%&7	%60		
# 56 IMUL            %58	%59	2		
# 57 SAL             %62	9	2		
# 58 STORE           	%&7	%62	%58	
# 59 SAL             %66	9	2		
# 60 LOAD            %65	%&7	%66		
# 61 IMUL            %64	%65	2		
# 62 SAL             %68	10	2		
# 63 STORE           	%&7	%68	%64	
# 64 MOV             %71	10			
# 65 PHI_MOV         %73	%71			
# 66 LABEL           				LOOP_72_BEGIN
# 67 CMP             	%73	%6		
# 68 JGE             				LOOP_72_END
# 69 LABEL           				LOOP_72_DO
# 70 ADD             %74	%73	1		
# 71 SUB             %79	%74	1		
# 72 SAL             %77	%79	2		
# 73 LOAD            %76	%&7	%77		
# 74 IMUL            %75	%76	2		
# 75 SAL             %80	%74	2		
# 76 STORE           	%&7	%80	%75	
# 77 NOOP            				
# 78 LABEL           				LOOP_72_CONTINUE
# 79 PHI_MOV         %73	%74			
# 80 JMP             				LOOP_72_BEGIN
# 81 NOOP            	%73			
# 82 NOOP            	%6			
# 83 NOOP            	%73			
# 84 NOOP            	%&7			
# 85 NOOP            	%&7			
# 86 LABEL           				LOOP_72_END
# 87 MOV             %83	0			
# 88 IDIV            %85	%3	%6		
# 89 CMP             	%85	10000		
# 90 JLT             				IF_84_ELSE
# 91 RET             	0			
# 92 LABEL           				IF_84_ELSE
# 93 LABEL           				IF_84_END
# 94 IDIV            %92	%3	%6		
# 95 SAL             %90	%92	2		
# 96 LOAD            %89	%2	%90		
# 97 MOD             %96	%3	%6		
# 98 SAL             %94	%96	2		
# 99 LOAD            %93	%&7	%94		
# 100 IDIV            %88	%89	%93		
# 101 MOD             %87	%88	2		
# 102 CMP             	%87	%4		
# 103 JEQ             				IF_86_ELSE
# 104 IDIV            %103	%3	%6		
# 105 SAL             %101	%103	2		
# 106 LOAD            %100	%2	%101		
# 107 MOD             %107	%3	%6		
# 108 SAL             %105	%107	2		
# 109 LOAD            %104	%&7	%105		
# 110 IDIV            %99	%100	%104		
# 111 MOD             %98	%99	2		
# 112 CMP             	%98	0		
# 113 JNE             				IF_97_ELSE
# 114 CMP             	%4	1		
# 115 JNE             				IF_108_ELSE
# 116 MOD             %112	%3	%6		
# 117 SAL             %110	%112	2		
# 118 LOAD            %109	%&7	%110		
# 119 PHI_MOV         %113	%109			
# 120 JMP             				IF_108_END
# 121 LABEL           				IF_108_ELSE
# 122 PHI_MOV         %113	%83			
# 123 LABEL           				IF_108_END
# 124 PHI_MOV         %114	%113			
# 125 JMP             				IF_97_END
# 126 LABEL           				IF_97_ELSE
# 127 PHI_MOV         %114	%83			
# 128 LABEL           				IF_97_END
# 129 IDIV            %121	%3	%6		
# 130 SAL             %119	%121	2		
# 131 LOAD            %118	%2	%119		
# 132 MOD             %125	%3	%6		
# 133 SAL             %123	%125	2		
# 134 LOAD            %122	%&7	%123		
# 135 IDIV            %117	%118	%122		
# 136 MOD             %116	%117	2		
# 137 CMP             	%116	1		
# 138 JNE             				IF_115_ELSE
# 139 CMP             	%4	0		
# 140 JNE             				IF_126_ELSE
# 141 MOD             %131	%3	%6		
# 142 SAL             %129	%131	2		
# 143 LOAD            %128	%&7	%129		
# 144 SUB             %127	%114	%128		
# 145 PHI_MOV         %132	%127			
# 146 JMP             				IF_126_END
# 147 LABEL           				IF_126_ELSE
# 148 PHI_MOV         %132	%114			
# 149 LABEL           				IF_126_END
# 150 PHI_MOV         %133	%132			
# 151 JMP             				IF_115_END
# 152 LABEL           				IF_115_ELSE
# 153 PHI_MOV         %133	%114			
# 154 LABEL           				IF_115_END
# 155 PHI_MOV         %134	%133			
# 156 JMP             				IF_86_END
# 157 LABEL           				IF_86_ELSE
# 158 PHI_MOV         %134	%83			
# 159 LABEL           				IF_86_END
# 160 IDIV            %139	%3	%6		
# 161 SAL             %137	%139	2		
# 162 LOAD            %136	%2	%137		
# 163 ADD             %135	%136	%134		
# 164 IDIV            %142	%3	%6		
# 165 SAL             %140	%142	2		
# 166 STORE           	%2	%140	%135	
# 167 RET             	0			
# [log]9 expire $arg:0:null r0
# [log]10 expire $arg:1:null r1
# [log]11 expire $arg:2:null r2
# [log]11 expire $arg:0:11 r0
# [log]11 expire $arg:1:11 r1
# [log]11 expire $arg:2:11 r2
# [log]12 expire $arg:3:11 r3
# [log]14 expire %8 r0
# [log]15 expire %12 r0
# [log]17 expire %11 r0
# [log]19 expire %14 r0
# [log]19 expire %10 r1
# [log]20 expire %18 r0
# [log]22 expire %17 r0
# [log]24 expire %20 r0
# [log]24 expire %16 r1
# [log]25 expire %24 r0
# [log]27 expire %23 r0
# [log]29 expire %26 r0
# [log]29 expire %22 r1
# [log]30 expire %30 r0
# [log]32 expire %29 r0
# [log]34 expire %32 r0
# [log]34 expire %28 r1
# [log]35 expire %36 r0
# [log]37 expire %35 r0
# [log]39 expire %38 r0
# [log]39 expire %34 r1
# [log]40 expire %42 r0
# [log]42 expire %41 r0
# [log]44 expire %44 r0
# [log]44 expire %40 r1
# [log]45 expire %48 r0
# [log]47 expire %47 r0
# [log]49 expire %50 r0
# [log]49 expire %46 r1
# [log]50 expire %54 r0
# [log]52 expire %53 r0
# [log]54 expire %56 r0
# [log]54 expire %52 r1
# [log]55 expire %60 r0
# [log]57 expire %59 r0
# [log]59 expire %62 r0
# [log]59 expire %58 r1
# [log]60 expire %66 r0
# [log]62 expire %65 r0
# [log]64 expire %68 r0
# [log]64 expire %64 r1
# [log]65 expire %71 r0
# [log]72 expire %79 r2
# [log]73 expire %77 r2
# [log]75 expire %76 r2
# [log]87 expire %73 r0
# [log]87 expire %74 r1
# [log]87 expire %80 r2
# [log]87 expire %75 r3
# [log]88 expire $arg:0:88 r0
# [log]88 expire $arg:1:88 r1
# [log]88 expire $arg:2:88 r2
# [log]94 expire $arg:3:88 r3
# [log]94 expire %85 r9
# [log]94 expire $arg:0:94 r0
# [log]94 expire $arg:1:94 r1
# [log]94 expire $arg:2:94 r2
# [log]95 expire $arg:3:94 r3
# [log]95 expire %92 r9
# [log]96 expire %90 r0
# [log]97 expire $arg:0:97 r0
# [log]97 expire $arg:1:97 r1
# [log]97 expire $arg:2:97 r2
# [log]98 expire $arg:3:97 r3
# [log]98 expire %96 r10
# [log]99 expire %94 r0
# [log]100 expire %89 r9
# [log]100 expire %93 r10
# [log]100 expire $arg:0:100 r0
# [log]100 expire $arg:1:100 r1
# [log]100 expire $arg:2:100 r2
# [log]101 expire $arg:3:100 r3
# [log]101 expire %88 r9
# [log]101 expire $arg:0:101 r0
# [log]101 expire $arg:1:101 r1
# [log]101 expire $arg:2:101 r2
# [log]104 expire $arg:3:101 r3
# [log]104 expire %87 r9
# [log]104 expire $arg:0:104 r0
# [log]104 expire $arg:1:104 r1
# [log]104 expire $arg:2:104 r2
# [log]105 expire $arg:3:104 r3
# [log]105 expire %103 r9
# [log]106 expire %101 r0
# [log]107 expire $arg:0:107 r0
# [log]107 expire $arg:1:107 r1
# [log]107 expire $arg:2:107 r2
# [log]108 expire $arg:3:107 r3
# [log]108 expire %107 r10
# [log]109 expire %105 r0
# [log]110 expire %100 r9
# [log]110 expire %104 r10
# [log]110 expire $arg:0:110 r0
# [log]110 expire $arg:1:110 r1
# [log]110 expire $arg:2:110 r2
# [log]111 expire $arg:3:110 r3
# [log]111 expire %99 r9
# [log]111 expire $arg:0:111 r0
# [log]111 expire $arg:1:111 r1
# [log]111 expire $arg:2:111 r2
# [log]116 expire $arg:3:111 r3
# [log]116 expire %98 r9
# [log]116 expire $arg:0:116 r0
# [log]116 expire $arg:1:116 r1
# [log]116 expire $arg:2:116 r2
# [log]117 expire $arg:3:116 r3
# [log]117 expire %112 r9
# [log]118 expire %110 r0
# [log]119 expire %109 r0
# [log]124 expire %113 r0
# [log]129 expire $arg:0:129 r0
# [log]129 expire $arg:1:129 r1
# [log]129 expire $arg:2:129 r2
# [log]130 expire $arg:3:129 r3
# [log]130 expire %121 r10
# [log]131 expire %119 r0
# [log]132 expire $arg:0:132 r0
# [log]132 expire $arg:1:132 r1
# [log]132 expire $arg:2:132 r2
# [log]133 expire $arg:3:132 r3
# [log]133 expire %125 r4
# [log]134 expire %123 r0
# [log]135 expire %122 r4
# [log]135 expire %118 r10
# [log]135 expire $arg:0:135 r0
# [log]135 expire $arg:1:135 r1
# [log]135 expire $arg:2:135 r2
# [log]136 expire $arg:3:135 r3
# [log]136 expire %117 r4
# [log]136 expire $arg:0:136 r0
# [log]136 expire $arg:1:136 r1
# [log]136 expire $arg:2:136 r2
# [log]141 expire $arg:3:136 r3
# [log]141 expire %116 r4
# [log]141 expire %4 r6
# [log]141 expire $arg:0:141 r0
# [log]141 expire $arg:1:141 r1
# [log]141 expire $arg:2:141 r2
# [log]142 expire $arg:3:141 r3
# [log]142 expire %131 r4
# [log]143 expire %129 r0
# [log]144 expire %128 r0
# [log]145 expire %127 r0
# [log]150 expire %132 r0
# [log]155 expire %133 r0
# [log]155 expire %114 r9
# [log]160 expire %83 r8
# [log]160 expire $arg:0:160 r0
# [log]160 expire $arg:1:160 r1
# [log]160 expire $arg:2:160 r2
# [log]161 expire $arg:3:160 r3
# [log]161 expire %139 r6
# [log]162 expire %137 r0
# [log]163 expire %136 r0
# [log]163 expire %134 r4
# [log]164 expire %3 r5
# [log]164 expire %6 r7
# [log]164 expire $arg:0:164 r0
# [log]164 expire $arg:1:164 r1
# [log]164 expire $arg:2:164 r2
# [log]165 expire $arg:3:164 r3
# [log]165 expire %142 r5
#FUNCTION_BEGIN  	3			set
.text
.global set
.type set, %function
set:
    SUB sp, sp, #164
    STR lr, [sp, #160]
    STR r11, [sp, #128]
    STR r4, [sp, #132]
    STR r5, [sp, #136]
    STR r6, [sp, #140]
    STR r7, [sp, #144]
    STR r8, [sp, #148]
    STR r9, [sp, #152]
    STR r10, [sp, #156]
#MOV             %2	$arg0			
    STR r0, [sp, #124]
#INFO            				NOT CONSTEXPR
#MOV             %3	$arg1			
   MOV r5, r1
#MOV             %4	$arg2			
   MOV r6, r2
#MOV             %6	30			
    MOV r7, #30
#MALLOC_IN_STACK %&7	124			
#SET_ARG         0	%&7			
    ADD r0, sp, #0
#SET_ARG         1	0			
    MOV r1, #0
#SET_ARG         2	124			
    MOV r2, #124
#CALL            				memset
   BL memset
#SAL             %8	0	2		
    MOV r11, #0
   LSL r0, r11, #2
#STORE           	%&7	%8	1	
    ADD r12, sp, #0
   ADD r12, r12, r0
    MOV r11, #1
    STR r11, [r12]
#SAL             %12	0	2		
    MOV r11, #0
   LSL r0, r11, #2
#LOAD            %11	%&7	%12		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %10	%11	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %14	1	2		
    MOV r11, #1
   LSL r0, r11, #2
#STORE           	%&7	%14	%10	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %18	1	2		
    MOV r11, #1
   LSL r0, r11, #2
#LOAD            %17	%&7	%18		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %16	%17	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %20	2	2		
    MOV r11, #2
   LSL r0, r11, #2
#STORE           	%&7	%20	%16	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %24	2	2		
    MOV r11, #2
   LSL r0, r11, #2
#LOAD            %23	%&7	%24		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %22	%23	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %26	3	2		
    MOV r11, #3
   LSL r0, r11, #2
#STORE           	%&7	%26	%22	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %30	3	2		
    MOV r11, #3
   LSL r0, r11, #2
#LOAD            %29	%&7	%30		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %28	%29	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %32	4	2		
    MOV r11, #4
   LSL r0, r11, #2
#STORE           	%&7	%32	%28	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %36	4	2		
    MOV r11, #4
   LSL r0, r11, #2
#LOAD            %35	%&7	%36		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %34	%35	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %38	5	2		
    MOV r11, #5
   LSL r0, r11, #2
#STORE           	%&7	%38	%34	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %42	5	2		
    MOV r11, #5
   LSL r0, r11, #2
#LOAD            %41	%&7	%42		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %40	%41	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %44	6	2		
    MOV r11, #6
   LSL r0, r11, #2
#STORE           	%&7	%44	%40	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %48	6	2		
    MOV r11, #6
   LSL r0, r11, #2
#LOAD            %47	%&7	%48		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %46	%47	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %50	7	2		
    MOV r11, #7
   LSL r0, r11, #2
#STORE           	%&7	%50	%46	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %54	7	2		
    MOV r11, #7
   LSL r0, r11, #2
#LOAD            %53	%&7	%54		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %52	%53	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %56	8	2		
    MOV r11, #8
   LSL r0, r11, #2
#STORE           	%&7	%56	%52	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %60	8	2		
    MOV r11, #8
   LSL r0, r11, #2
#LOAD            %59	%&7	%60		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %58	%59	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %62	9	2		
    MOV r11, #9
   LSL r0, r11, #2
#STORE           	%&7	%62	%58	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#SAL             %66	9	2		
    MOV r11, #9
   LSL r0, r11, #2
#LOAD            %65	%&7	%66		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %64	%65	2		
    MOV r12, #2
    MUL r1, r0, r12
#SAL             %68	10	2		
    MOV r11, #10
   LSL r0, r11, #2
#STORE           	%&7	%68	%64	
    ADD r12, sp, #0
   ADD r12, r12, r0
    STR r1, [r12]
#MOV             %71	10			
    MOV r0, #10
#PHI_MOV         %73	%71			
#LABEL           				LOOP_72_BEGIN
LOOP_72_BEGIN:
#CMP             	%73	%6		
    CMP r0, r7
#JGE             				LOOP_72_END
   BGE LOOP_72_END
#LABEL           				LOOP_72_DO
LOOP_72_DO:
#ADD             %74	%73	1		
    ADD r1, r0, #1
#SUB             %79	%74	1		
     SUB r2, r1, #1
#SAL             %77	%79	2		
   LSL r2, r2, #2
#LOAD            %76	%&7	%77		
    ADD r12, sp, #0
    ADD r12, r12, r2
    LDR r2, [r12]
#IMUL            %75	%76	2		
    MOV r12, #2
    MUL r3, r2, r12
#SAL             %80	%74	2		
   LSL r2, r1, #2
#STORE           	%&7	%80	%75	
    ADD r12, sp, #0
   ADD r12, r12, r2
    STR r3, [r12]
#NOOP            				
#LABEL           				LOOP_72_CONTINUE
LOOP_72_CONTINUE:
#PHI_MOV         %73	%74			
   MOV r0, r1
#JMP             				LOOP_72_BEGIN
   B LOOP_72_BEGIN
#NOOP            	%73			
#NOOP            	%6			
#NOOP            	%73			
#NOOP            	%&7			
#NOOP            	%&7			
#LABEL           				LOOP_72_END
LOOP_72_END:
#MOV             %83	0			
    MOV r8, #0
#IDIV            %85	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idiv
   MOV r9, r0
#CMP             	%85	10000		
    MOV r11, #10000
    CMP r9, r11
#JLT             				IF_84_ELSE
   BLT IF_84_ELSE
#RET             	0			
    MOV r0, #0
    LDR lr, [sp, #160]
    LDR r11, [sp,#128]
    LDR r4, [sp,#132]
    LDR r5, [sp,#136]
    LDR r6, [sp,#140]
    LDR r7, [sp,#144]
    LDR r8, [sp,#148]
    LDR r9, [sp,#152]
    LDR r10, [sp,#156]
    MOV r12, #164
    ADD sp, sp, r12
    MOV PC, LR
#LABEL           				IF_84_ELSE
IF_84_ELSE:
#LABEL           				IF_84_END
IF_84_END:
#IDIV            %92	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idiv
   MOV r9, r0
#SAL             %90	%92	2		
   LSL r0, r9, #2
#LOAD            %89	%2	%90		
    LDR r12, [sp,#124]
    ADD r12, r12, r0
    LDR r9, [r12]
#MOD             %96	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idivmod
    MOV r10, r1
#SAL             %94	%96	2		
   LSL r0, r10, #2
#LOAD            %93	%&7	%94		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r10, [r12]
#IDIV            %88	%89	%93		
    MOV r0, r9
    MOV r1, r10
    BL __aeabi_idiv
   MOV r9, r0
#MOD             %87	%88	2		
    MOV r0, r9
    MOV r1, #2
    BL __aeabi_idivmod
    MOV r9, r1
#CMP             	%87	%4		
    CMP r9, r6
#JEQ             				IF_86_ELSE
   BEQ IF_86_ELSE
#IDIV            %103	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idiv
   MOV r9, r0
#SAL             %101	%103	2		
   LSL r0, r9, #2
#LOAD            %100	%2	%101		
    LDR r12, [sp,#124]
    ADD r12, r12, r0
    LDR r9, [r12]
#MOD             %107	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idivmod
    MOV r10, r1
#SAL             %105	%107	2		
   LSL r0, r10, #2
#LOAD            %104	%&7	%105		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r10, [r12]
#IDIV            %99	%100	%104		
    MOV r0, r9
    MOV r1, r10
    BL __aeabi_idiv
   MOV r9, r0
#MOD             %98	%99	2		
    MOV r0, r9
    MOV r1, #2
    BL __aeabi_idivmod
    MOV r9, r1
#CMP             	%98	0		
    MOV r11, #0
    CMP r9, r11
#JNE             				IF_97_ELSE
   BNE IF_97_ELSE
#CMP             	%4	1		
    MOV r11, #1
    CMP r6, r11
#JNE             				IF_108_ELSE
   BNE IF_108_ELSE
#MOD             %112	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idivmod
    MOV r9, r1
#SAL             %110	%112	2		
   LSL r0, r9, #2
#LOAD            %109	%&7	%110		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#PHI_MOV         %113	%109			
#JMP             				IF_108_END
   B IF_108_END
#LABEL           				IF_108_ELSE
IF_108_ELSE:
#PHI_MOV         %113	%83			
   MOV r0, r8
#LABEL           				IF_108_END
IF_108_END:
#PHI_MOV         %114	%113			
   MOV r9, r0
#JMP             				IF_97_END
   B IF_97_END
#LABEL           				IF_97_ELSE
IF_97_ELSE:
#PHI_MOV         %114	%83			
   MOV r9, r8
#LABEL           				IF_97_END
IF_97_END:
#IDIV            %121	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idiv
   MOV r10, r0
#SAL             %119	%121	2		
   LSL r0, r10, #2
#LOAD            %118	%2	%119		
    LDR r12, [sp,#124]
    ADD r12, r12, r0
    LDR r10, [r12]
#MOD             %125	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idivmod
    MOV r4, r1
#SAL             %123	%125	2		
   LSL r0, r4, #2
#LOAD            %122	%&7	%123		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r4, [r12]
#IDIV            %117	%118	%122		
    MOV r0, r10
    MOV r1, r4
    BL __aeabi_idiv
   MOV r4, r0
#MOD             %116	%117	2		
    MOV r0, r4
    MOV r1, #2
    BL __aeabi_idivmod
    MOV r4, r1
#CMP             	%116	1		
    MOV r11, #1
    CMP r4, r11
#JNE             				IF_115_ELSE
   BNE IF_115_ELSE
#CMP             	%4	0		
    MOV r11, #0
    CMP r6, r11
#JNE             				IF_126_ELSE
   BNE IF_126_ELSE
#MOD             %131	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idivmod
    MOV r4, r1
#SAL             %129	%131	2		
   LSL r0, r4, #2
#LOAD            %128	%&7	%129		
    ADD r12, sp, #0
    ADD r12, r12, r0
    LDR r0, [r12]
#SUB             %127	%114	%128		
     SUB r0, r9, r0
#PHI_MOV         %132	%127			
#JMP             				IF_126_END
   B IF_126_END
#LABEL           				IF_126_ELSE
IF_126_ELSE:
#PHI_MOV         %132	%114			
   MOV r0, r9
#LABEL           				IF_126_END
IF_126_END:
#PHI_MOV         %133	%132			
#JMP             				IF_115_END
   B IF_115_END
#LABEL           				IF_115_ELSE
IF_115_ELSE:
#PHI_MOV         %133	%114			
   MOV r0, r9
#LABEL           				IF_115_END
IF_115_END:
#PHI_MOV         %134	%133			
   MOV r4, r0
#JMP             				IF_86_END
   B IF_86_END
#LABEL           				IF_86_ELSE
IF_86_ELSE:
#PHI_MOV         %134	%83			
   MOV r4, r8
#LABEL           				IF_86_END
IF_86_END:
#IDIV            %139	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idiv
   MOV r6, r0
#SAL             %137	%139	2		
   LSL r0, r6, #2
#LOAD            %136	%2	%137		
    LDR r12, [sp,#124]
    ADD r12, r12, r0
    LDR r0, [r12]
#ADD             %135	%136	%134		
    ADD r4, r0, r4
#IDIV            %142	%3	%6		
    MOV r0, r5
    MOV r1, r7
    BL __aeabi_idiv
   MOV r5, r0
#SAL             %140	%142	2		
   LSL r0, r5, #2
#STORE           	%2	%140	%135	
    LDR r12, [sp,#124]
   ADD r12, r12, r0
    STR r4, [r12]
#RET             	0			
    MOV r0, #0
    LDR lr, [sp, #160]
    LDR r11, [sp,#128]
    LDR r4, [sp,#132]
    LDR r5, [sp,#136]
    LDR r6, [sp,#140]
    LDR r7, [sp,#144]
    LDR r8, [sp,#148]
    LDR r9, [sp,#152]
    LDR r10, [sp,#156]
    MOV r12, #164
    ADD sp, sp, r12
    MOV PC, LR
.data
.global __Var__4seed
__Var__4seed:
.word 19971231
.word 19981013
.word 1000000007
.space 0
.data
.global __Var__11staticvalue
__Var__11staticvalue:
.word 0
# 1 FUNCTION_BEGIN  	0			rand
# 2 SAL             %146	0	2		
# 3 LOAD            %145	@&seed	%146		
# 4 IMUL            %144	@staticvalue	%145		
# 5 SAL             %149	1	2		
# 6 LOAD            %148	@&seed	%149		
# 7 ADD             %143	%144	%148		
# 8 MOV             @staticvalue	%143			
# 9 SAL             %153	2	2		
# 10 LOAD            %152	@&seed	%153		
# 11 MOD             %151	@staticvalue	%152		
# 12 MOV             @staticvalue	%151			
# 13 CMP             	@staticvalue	0		
# 14 JGE             				IF_155_ELSE
# 15 SAL             %158	2	2		
# 16 LOAD            %157	@&seed	%158		
# 17 ADD             %156	%157	@staticvalue		
# 18 MOV             @staticvalue	%156			
# 19 LABEL           				IF_155_ELSE
# 20 LABEL           				IF_155_END
# 21 RET             	@staticvalue			
# [log]3 expire %146 r0
# [log]4 expire %145 r0
# [log]6 expire %149 r1
# [log]7 expire %144 r0
# [log]7 expire %148 r1
# [log]8 expire %143 r0
# [log]10 expire %153 r0
# [log]11 expire %152 r4
# [log]11 expire $arg:0:11 r0
# [log]11 expire $arg:1:11 r1
# [log]11 expire $arg:2:11 r2
# [log]15 expire $arg:3:11 r3
# [log]15 expire %151 r4
# [log]16 expire %158 r0
# [log]17 expire %157 r0
#FUNCTION_BEGIN  	0			rand
.text
.global rand
.type rand, %function
rand:
    SUB sp, sp, #12
    STR lr, [sp, #8]
    STR r11, [sp, #0]
    STR r4, [sp, #4]
#SAL             %146	0	2		
    MOV r11, #0
   LSL r0, r11, #2
#LOAD            %145	@&seed	%146		
    MOV32 r12, __Var__4seed
    ADD r12, r12, r0
    LDR r0, [r12]
#IMUL            %144	@staticvalue	%145		
    MOV32 r11,__Var__11staticvalue
    LDR r11, [r11, #0]
    MUL r0, r11, r0
#SAL             %149	1	2		
    MOV r11, #1
   LSL r1, r11, #2
#LOAD            %148	@&seed	%149		
    MOV32 r12, __Var__4seed
    ADD r12, r12, r1
    LDR r1, [r12]
#ADD             %143	%144	%148		
    ADD r0, r0, r1
#MOV             @staticvalue	%143			
    MOV32 r11, __Var__11staticvalue
    STR r0, [r11,#0]
#SAL             %153	2	2		
    MOV r11, #2
   LSL r0, r11, #2
#LOAD            %152	@&seed	%153		
    MOV32 r12, __Var__4seed
    ADD r12, r12, r0
    LDR r4, [r12]
#MOD             %151	@staticvalue	%152		
    MOV32 r0,__Var__11staticvalue
    LDR r0, [r0, #0]
    MOV r1, r4
    BL __aeabi_idivmod
    MOV r4, r1
#MOV             @staticvalue	%151			
    MOV32 r11, __Var__11staticvalue
    STR r4, [r11,#0]
#CMP             	@staticvalue	0		
    MOV32 r12,__Var__11staticvalue
    LDR r12, [r12, #0]
    MOV r11, #0
    CMP r12, r11
#JGE             				IF_155_ELSE
   BGE IF_155_ELSE
#SAL             %158	2	2		
    MOV r11, #2
   LSL r0, r11, #2
#LOAD            %157	@&seed	%158		
    MOV32 r12, __Var__4seed
    ADD r12, r12, r0
    LDR r0, [r12]
#ADD             %156	%157	@staticvalue		
    MOV32 r12,__Var__11staticvalue
    LDR r12, [r12, #0]
    ADD r0, r0, r12
#MOV             @staticvalue	%156			
    MOV32 r11, __Var__11staticvalue
    STR r0, [r11,#0]
#LABEL           				IF_155_ELSE
IF_155_ELSE:
#LABEL           				IF_155_END
IF_155_END:
#RET             	@staticvalue			
    MOV32 r0,__Var__11staticvalue
    LDR r0, [r0, #0]
    LDR lr, [sp, #8]
    LDR r11, [sp,#0]
    LDR r4, [sp,#4]
    ADD sp, sp, #12
    MOV PC, LR
.data
.global __Var__1a
__Var__1a:
.space 40000
# 1 FUNCTION_BEGIN  	0			main
# 2 CALL            %161				getint
# 3 CALL            %162				getint
# 4 MOV             @staticvalue	%162			
# 5 CALL            %163				_sysy_starttime
# 6 PHI_MOV         %167	%164			
# 7 PHI_MOV         %168	%165			
# 8 PHI_MOV         %169	%161			
# 9 LABEL           				LOOP_166_BEGIN
# 10 CMP             	%169	0		
# 11 JLE             				LOOP_166_END
# 12 LABEL           				LOOP_166_DO
# 13 SUB             %170	%169	1		
# 14 CALL            %172				rand
# 15 MOD             %171	%172	300000		
# 16 CALL            %174				rand
# 17 MOD             %173	%174	2		
# 18 SET_ARG         2	%173			
# 19 SET_ARG         1	%171			
# 20 SET_ARG         0	@&a			
# 21 CALL            %175				set
# 22 NOOP            				
# 23 LABEL           				LOOP_166_CONTINUE
# 24 PHI_MOV         %167	%171			
# 25 PHI_MOV         %168	%173			
# 26 PHI_MOV         %169	%170			
# 27 JMP             				LOOP_166_BEGIN
# 28 NOOP            	%169			
# 29 NOOP            	%169			
# 30 NOOP            	@&a			
# 31 LABEL           				LOOP_166_END
# 32 CALL            %176				_sysy_stoptime
# 33 SET_ARG         1	@&a			
# 34 SET_ARG         0	10000			
# 35 CALL            %177				putarray
# 36 RET             	0			
# [log]2 expire $arg:0:2 r0
# [log]2 expire $arg:1:2 r1
# [log]2 expire $arg:2:2 r2
# [log]3 expire $arg:3:2 r3
# [log]3 expire $arg:0:3 r0
# [log]3 expire $arg:1:3 r1
# [log]3 expire $arg:2:3 r2
# [log]4 expire $arg:3:3 r3
# [log]4 expire %162 r5
# [log]5 expire %163 r5
# [log]5 expire $arg:0:5 r0
# [log]5 expire $arg:1:5 r1
# [log]5 expire $arg:2:5 r2
# [log]6 expire $arg:3:5 r3
# [log]8 expire %161 r4
# [log]14 expire $arg:0:14 r0
# [log]14 expire $arg:1:14 r1
# [log]14 expire $arg:2:14 r2
# [log]15 expire $arg:3:14 r3
# [log]15 expire %172 r8
# [log]15 expire $arg:0:15 r0
# [log]15 expire $arg:1:15 r1
# [log]15 expire $arg:2:15 r2
# [log]16 expire $arg:3:15 r3
# [log]16 expire $arg:0:16 r0
# [log]16 expire $arg:1:16 r1
# [log]16 expire $arg:2:16 r2
# [log]17 expire $arg:3:16 r3
# [log]17 expire %174 r9
# [log]17 expire $arg:0:17 r0
# [log]17 expire $arg:1:17 r1
# [log]17 expire $arg:2:17 r2
# [log]18 expire $arg:3:17 r3
# [log]19 expire $arg:2:null r2
# [log]20 expire $arg:1:null r1
# [log]21 expire $arg:0:null r0
# [log]21 expire %175 r10
# [log]21 expire $arg:0:21 r0
# [log]21 expire $arg:1:21 r1
# [log]21 expire $arg:2:21 r2
# [log]32 expire $arg:3:21 r3
# [log]32 expire %169 r4
# [log]32 expire %167 r5
# [log]32 expire %168 r6
# [log]32 expire %170 r7
# [log]32 expire %171 r8
# [log]32 expire %173 r9
# [log]32 expire %176 r4
# [log]32 expire $arg:0:32 r0
# [log]32 expire $arg:1:32 r1
# [log]32 expire $arg:2:32 r2
# [log]33 expire $arg:3:32 r3
# [log]35 expire %177 r4
# [log]35 expire $arg:0:35 r0
# [log]35 expire $arg:1:35 r1
# [log]35 expire $arg:2:35 r2
#FUNCTION_BEGIN  	0			main
.text
.global main
.type main, %function
main:
    SUB sp, sp, #36
    STR lr, [sp, #32]
    STR r11, [sp, #0]
    STR r4, [sp, #4]
    STR r5, [sp, #8]
    STR r6, [sp, #12]
    STR r7, [sp, #16]
    STR r8, [sp, #20]
    STR r9, [sp, #24]
    STR r10, [sp, #28]
#CALL            %161				getint
   BL getint
    MOV r4, r0
#CALL            %162				getint
   BL getint
    MOV r5, r0
#MOV             @staticvalue	%162			
    MOV32 r11, __Var__11staticvalue
    STR r5, [r11,#0]
#CALL            %163				_sysy_starttime
   BL _sysy_starttime
    MOV r5, r0
#PHI_MOV         %167	%164			
    LDR r12, [sp,#0]
   MOV r5, r12
#PHI_MOV         %168	%165			
    LDR r12, [sp,#0]
   MOV r6, r12
#PHI_MOV         %169	%161			
#LABEL           				LOOP_166_BEGIN
LOOP_166_BEGIN:
#CMP             	%169	0		
    MOV r11, #0
    CMP r4, r11
#JLE             				LOOP_166_END
   BLE LOOP_166_END
#LABEL           				LOOP_166_DO
LOOP_166_DO:
#SUB             %170	%169	1		
     SUB r7, r4, #1
#CALL            %172				rand
   BL rand
    MOV r8, r0
#MOD             %171	%172	300000		
    MOV r0, r8
    MOV32 r1,  300000
    BL __aeabi_idivmod
    MOV r8, r1
#CALL            %174				rand
   BL rand
    MOV r9, r0
#MOD             %173	%174	2		
    MOV r0, r9
    MOV r1, #2
    BL __aeabi_idivmod
    MOV r9, r1
#SET_ARG         2	%173			
    MOV r2, r9
#SET_ARG         1	%171			
    MOV r1, r8
#SET_ARG         0	@&a			
    MOV32 r0, __Var__1a
#CALL            %175				set
   BL set
    MOV r10, r0
#NOOP            				
#LABEL           				LOOP_166_CONTINUE
LOOP_166_CONTINUE:
#PHI_MOV         %167	%171			
   MOV r5, r8
#PHI_MOV         %168	%173			
   MOV r6, r9
#PHI_MOV         %169	%170			
   MOV r4, r7
#JMP             				LOOP_166_BEGIN
   B LOOP_166_BEGIN
#NOOP            	%169			
#NOOP            	%169			
#NOOP            	@&a			
#LABEL           				LOOP_166_END
LOOP_166_END:
#CALL            %176				_sysy_stoptime
   BL _sysy_stoptime
    MOV r4, r0
#SET_ARG         1	@&a			
    MOV32 r1, __Var__1a
#SET_ARG         0	10000			
    MOV r0, #10000
#CALL            %177				putarray
   BL putarray
    MOV r4, r0
#RET             	0			
    MOV r0, #0
    LDR lr, [sp, #32]
    LDR r11, [sp,#0]
    LDR r4, [sp,#4]
    LDR r5, [sp,#8]
    LDR r6, [sp,#12]
    LDR r7, [sp,#16]
    LDR r8, [sp,#20]
    LDR r9, [sp,#24]
    LDR r10, [sp,#28]
    ADD sp, sp, #36
    MOV PC, LR
